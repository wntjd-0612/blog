[{"content":"문자열 지난 시간에 배웠던 내용인 문자열에 대해서 자세히 알아보자\n문자열 자료형 이스케이프 시퀸스(escape sequence) 문자열에서 표현하기 어려운 특정 문자를 백 슬레시()로 표현하는 것\n이스케이프 시퀸스 의미 \\n 개행(엔터) \\b 백스페이스(글자 하나를 지움) \\t 탭 \\' 작은 따옴표 \\\u0026quot; 큰 따옴표 \\\\ 백 슬레시 문자 문자열 연산 문자열 연산하기 (Concatenation) 덧셈부호(+)를 이용하여 문자열 연결 연산 수행 가능 문자열 반복하기 곱셈 부호(*)를 이용하여 문자열을 반복하는 연산 수행 가능 문자열 * 정수 정수 * 문자열의 형태로 사용 문자열 포매팅 포매팅(Formatting) : 사용자가 문자열의 포맷을 지정하는 것 문자열에 포함된 값이 계속해서 변경될 경우, 변수와 포매팅을 이용하여 가독성을 높일 수 있다. 문자열 안에 포맷 코드를 입력한 뒤, 가장 뒤에 %와 함께 대응하는 값을 써준다. 포맷 코드에 대응하는 값이 올바르게 연결되어야 하며, 포맷 코드와 대응되는 개수가 같아야 함 문자열 포맷 코드 | 코드 | 설명 | |\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;| | %s | 문자열(stirng) | | %c | 문자 1개 (character) | | %d | 정수(integer) | | %f | 실수(floating-point) | | %% | %자체를 출력 | format 함수를 사용한 포매팅 문자열 내에 {name1},{name2}, ..와 같은 형태로 이름을 붙여 사용하고, format 함수에 이름에 해당하는 입력값을 넣어주면 대응하는 값으로 바뀌어 출력한다 f를 이용한 포매팅 1 print(f\u0026#34;{asf}이다\u0026#34;) 문자열 함수 문자열 자료형이 자체적으로 가지고 있는 내장함수를 사용할 수 있다. 문자열 변구 이름 뒤에 .을 붙인 다음 함수를 호출하는 방식으러 사용한다. 함수의 종류 함수 설명 count() 전달인자와 같은 문자의 개수를 반환 find() 전달인자를 찾아 인덱스 값을 반환, 없다면 -1반환 index() 전달인자를 찾아 인덱스 값을 반환, 없다면 오류 반환 join() 전달인자 사이에 문자열을 삽입 upper() 소문자를 대문자로 바꾸기 lower() 대문자를 소문자로 바꾸기 lstrip() 가장 왼쪽에 있는 공백 모두 지우기 rstrip() 가장 오른쪽에 있는 공백 모두 지우기 replace() 문자열 안의 특정한 값을 다른 값으로 치환 split() 전달인자 기준으로 문자열을 나눠 리스트로 반환 odd() 문자에 대응하는 아스키코드 값을 반환 chr() 아스키코드 값에 대응하는 문자를 반환 ","date":"2024-05-02T00:50:00Z","image":"http://localhost:1313/p/simple_python4/thumb_hu6ce46be598242d68941202901d39eb59_93419_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/simple_python4/","title":"python 기초문법4"},{"content":"python 입출력문 python()함수는 마지막 데이터에서 뒤에 줄 바꿈 문자를 포함한디.\n1 2 print(\u0026#39;a\u0026#39;) print(\u0026#39;b\u0026#39;) 이를 무시하기 위해서는\n1 2 print(\u0026#39;a\u0026#39;,end=\u0026#39;\u0026#39;) print(\u0026#39;b\u0026#39;) 을 통해서 무시할 수 있다.\nprint() 함수에서 여러줄을 출력할 때는 따옴표를 연속으로 3개 사용하여 여러줄에 해당하는 문자영을 한번에 담거나 \\n을 사용하여 줄바꿈을 해줄 수 있다. python 변수 데이터를 저장하는 공간을 의미하며, 변하는 값을 저장할 수 있어서 변수라고 한다. 변수에 이름을 붙인 것을 변수명이라고 하며 변수 이름으로 한글을 사용할수 있다. 파이썬은 변수의 이름을 적어 주는 것만으로 변수를 선언할 수 있으며, 자료형을 명시하지 않아도 저장되는 값에 따라 자료형(데이터 타입)을 자동으로 추론한다. 대입 연산자를 통해 변수에 값을 할당할 수 있으며, 이를 초기화라고 한다. python 입력변수 input()\ninput() 함수는 입력받은 값을 문자열로 저장한다. 입력받은 값으로 산술 연산을 하기 위해서는 해당 값을 정수형(int)로 혹은 실수(float)으로 변화해야 한다. 1 2 3 4 a=input() print(type(a)) a=int(input()) print(type(a)) 연산자 변수나 값의 연산을 위해 사용하는 것으로 프로그램의 목적에 따라 산술 연산자, 비교 연산자, 논리 연산자 등을 위해 사용할 수 있다. 종류 연산자 역할 산술 연산자 + 덧셈 - 뺄셈 * 곱샘 / 나눗셈 // 니누었을 때의 몫 % 나누었을 때의 나머지 ** 거듭제곱 비교 연산자 \u0026gt; 크다 \u0026gt;= 크거나 같다 \u0026lt; 작다 \u0026lt;= 작거나 같다 == 같다 != 같지 않다 논리 연산자 and 두 값이 모두 True일 때만 True or 두 값 중 하나라도 True라면 True라면 True not False면 True True면 False 대입 연산자 = 오른쪽의 값을 왼쪽애 대입 +=,-=,*=.-,/= 두 값 중 하나라도 True라면 True라면 True 비트 연산자 \u0026amp; 비트 단위 AND 연산 | 비트 단위 OR 연산 ^ 비트 단위 XOR 연산 ~ 비트를 보수 연산 ","date":"2024-05-02T00:48:00Z","image":"http://localhost:1313/p/simple_python3/thumb_hu6ce46be598242d68941202901d39eb59_93419_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/simple_python3/","title":"python 기초문법3"},{"content":"ACM Craft 문제 문제 설명 문제에 나와있는 그림으로 되어 있을때 4를 건설하기 위해서는 1-\u0026gt;2-\u0026gt;4,1-\u0026gt;3-\u0026gt;4순서중 하나로 건설되어야 한다. 이런 선수 관계를 나타내기 위해 위상 정렬 알고리즘을 사용해야 한다\n그리고, 1-\u0026gt;2-\u0026gt;4의 경로는 건설시간이 21초 걸리고 1-\u0026gt;3-\u0026gt;4 경로는 건설시간이 총 120초가 걸리는데 4를 건설하기 위해서는 2와 3이 모두 완료되어야 하기 때문에 2가 빨리 끝나더라도 3을 기다려야 한다. 그래서 4를 건설하기 위한 시간은 1-\u0026gt;3-\u0026gt;4의 소요시간인 120초인 것이다.\n풀이 순서 이제 우리는 경로를 만들고 그 경로에 들어오는것이 두개 이상이라면 그 경로 중 최댓값을 저장하는 방식으로 하면 됩니당. 이 부분을 저장하기 위해서는 dp를 이용해서 두 경로중 최댓값을 저장하는 방식으로 갈 것입니다. 그러면 이 문제에 핵심은 위상정렬을 사용하되, 위상정렬을 하는 과정에서 DP를 이용해 최댓값을 저장해 나간다는 점이다.\n풀이 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 import sys from collections import deque input = sys.stdin.readline T = int(input()) #테스트 케이스 입력 for _ in range(T): N, K = map(int, input().split()) #건물개수와 건설 규칙 개수 입력 time = [0] + list(map(int, input().split())) #각 건물 건설의 걸리는 시간 seq = [[] for _ in range(N + 1)] d = [0 for _ in range(N + 1)] dp = [0 for _ in range(N + 1)] for _ in range(K): a, b = map(int, input().split()) #건설 규칙(순서 입력) seq[a].append(b) #그래프화 d[b] += 1걸리는 시간 q = deque() for i in range(1, N + 1): if d[i] == 0: q.append(i) dp[i] = time[i] while q: a = q.popleft() for i in seq[a]: d[i] -= 1 dp[i] = max(dp[a] + time[i], dp[i]) if d[i] == 0: q.append(i) ans = int(input()) print(dp[ans]) ","date":"2024-04-16T06:48:00Z","image":"http://localhost:1313/p/baekjoon_1005/thumb_hufeb8c3ca71f33f4bcc8d200b08d27217_56508_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/baekjoon_1005/","title":"백준 1005"},{"content":"대피소 문제 문제 설명 이 문제는 기본적인 dp1 문제이다. 다른 DP와 같이 규칙을 찾아서 그 규칙에 맞게 구현하면 된다. 풀이 순서 dp 점화식을 구한다 구현한다 -이 문제에는 두가지 점화식이 있다 풀이 1 이 문제의 수열 (1,1,1,2,2,3,4,5,7,9, \u0026hellip;.)을 보면 규칙을 찾을 수 있다. i번째 수는 i-1번째수와 i-5번째 수를 더한 값이라는 것이다.(점화식으로 표현하면 dp[i]=dp[i-5]+dp[i-1]) 이에 따른 코드를 적어보면 1 2 3 4 5 6 7 8 9 def f(n): dp = [1,1,1,2,2] #i-5번째 수까지 필요하므로 5개의 배열을 생성한다 if n\u0026lt;5:return dp[n-1] #만약 i가 5이하이면 인덱싱에 맞춰서 해당 값을 반환해준다 for i in range(5,n): #i가 5이상이면 for문을 통해 점화식을 써서 값을 구해준다 dp.append(dp[i-1]+dp[i-5]) return dp[n-1] #인덱스를 이용하여 해당번째 값을 반환한다 for i in range(int(input())): print(f(int(input())))#미친 숏코딩인데 이해하실 수 있죠....? 풀이 2 이 문제의 수열 (1,1,1,2,2,3,4,5,7,9, \u0026hellip;.)을 보면 규칙을 찾을 수 있다. i번째 수는 i-2번째수와 i-3번째 수를 더한 값이라는 것이다.(점화식으로 표현하면 dp[i]=dp[i-5]+dp[i-1]) 이에 따른 코드를 적어보면 1 2 3 4 5 6 7 8 9 def f(n): dp = [1,1,1] #i-3번째 수까지 필요하므로 3개의 배열을 생성한다 if n\u0026lt;3:return dp[n-1] #만약 i가 5이하이면 인덱싱에 맞춰서 해당 값을 반환해준다 for i in range(3,n): #i가 5이상이면 for문을 통해 점화식을 써서 값을 구해준다 dp.append(dp[i-2]+dp[i-3]) return dp[n-1] #인덱스를 이용하여 해당번째 값을 반환한다 for i in range(int(input())): print(f(int(input())))#미친 숏코딩인데 이해하실 수 있죠....? 2\n나중에 설명하는 글을 쓸껀데 지금은 없으니깐 나무위키 문서 넣어야징\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n사실상 점화식만 바꾸면 되는게 학계의 점심 뭐먹지?\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-12T06:48:00Z","image":"http://localhost:1313/p/baekjoon_9461/thumb_hufeb8c3ca71f33f4bcc8d200b08d27217_56508_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/baekjoon_9461/","title":"백준 9461"},{"content":"대피소 이 문제는 2023년 정보올림피아드 1차 초등부 2번, 고등부 1번으로 출제된 문제 입니다. 문제 설명 N개의 집 중 K개의 대피소를 설치하여 대피소 까지의 거리를 최소로 만드는 문제 입니다. 집은 최대 50개, 대피소는 최대 3개로 숫자가 작기 때문에 무작정 다 시도해보는 브루트포스로 풀 수 있습니다.\nN=집 수, K=대피소 수 대피소는 집들 중에 있습니다.\n풀이 순서 가능한 대피소 조합 만들기 집을 for문으로 해서 가장 가까운 대피소 찾아 거리 확정 모든 집에서 대피소 거리중 가장 큰 값 저장 (모든 대피소 조합) 3번 값들 중 가장 작은 값 출력 중요 X, Y는 각각 따로 저장! 최소값을 저장하는 변수에는 float(\u0026ldquo;INF\u0026rdquo;) 로 초기화 최소, 최대 비교는 if문 보다 min, max 활용! 나의 코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from itertools import combinations #조합 N, K = map(int,input().split()) # n,k(집,대피소) 입력 x = [0] * N y = [0] * N for i in range(N): x[i], y[i] = map(int,input().split()) #위치 입력 comb = list(combinations(range(N),K)) #조합으로 INF = float(\u0026#34;INF\u0026#34;) r=INF # 결과 값을 찾기 위해 결과 무한 설절 for c in comb: case = 0 # 경우 for home in range(N): distance = INF #최솟값을 찾기 위해 거리를 무한으로 설정 for hide in c: tmp = abs(x[home]-x[hide])+abs(y[home]-y[hide]) #거리 구하기 distance = min(tmp, distance) #최소 거리 case = max(case, distance) #가장 많은 경우 r = min(r,case) # 최소 케이스 print(r) ","date":"2024-04-12T03:48:00Z","image":"http://localhost:1313/p/baekjoon_28215/thumb_hufeb8c3ca71f33f4bcc8d200b08d27217_56508_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/baekjoon_28215/","title":"백준 28215"},{"content":"python의 자료형 파이썬은 자동으로 자료형을 추론해 주지만, 프로그램을 만들때 어떤 자료를 저장할 것인지 알고 있는 것은 매우 중요합니다. 파이썬의 자료형은 크게 데이터형과 컨테이너형으로 구분할 수 있습니다. 오늘은 컨테이너형만 다룰 것입니다. 컨테이너형 여러 개의 변수를 하나의 이름으로 묶어서 관리할 수 있는 데이터 포맷 형태 리스트 자료형 데이터를 연속적인 공간에 저장하는 자료구조, 서로 다른 자료형도 저장할 수 있습니다. 리스트에 각 요소는 쉼표로 구분, 대괄호([])로 감싸서 표현합니다 리스트 연산 덧셈기호(+)를 사용하여 리스트 연결 연산을 수행할 수 있다. 곱셈기호(*)를 사용하여 리스트를 반복하는 연산을 수행할 수 있다. 리스트정수, 정수리스트 형태로 사용할 수 있다. len함수(len())를 사용하여 리스트에 길이를 구할 수 있다. 리스트 인덱싱과 슬라이싱 리스트 인덱싱 인덱싱(indexing): 수많은 데이터중 원하는 항목을 쉽게 찾도록 \u0026lsquo;가리키는 것\u0026rsquo; ⭐인덱스 번호는 0부터 시작 뒤에서부터 읽기 위해서 마이너스 기호를 사용, 이때 뒤에서부터 첫 번째값은 인덱스-1로 표현한다. 리스트 슬라이싱 슬라이싱(slicing): 인덱스를 사용하여 수많은 데이터 중 원하는 항목을 잘라내는 것 1 변수명[시작 인덱스 번호:끝 인덱스 번호] 시작 인덱스 번호에 해당하는 값부터 잘라내며, 끝 인덱스 번호는 포함하지 않음 시작 인덱스 번호 생략: 리스트에 시작 ~ 끝 인덱스 번호 전 끝 인덱스 번호 생략: 시작 인덱스 번호 ~ 리스트의 끝 시작과 끝의 인덱스 번호를 모두 생략: 리스트의 시작 ~ 리스트의 끝 리스트 수정하기 문자열은 immutable 타입이기 때문에 인덱싱으로 값을 수정할 수 없지만, 리스트는 인덱싱과 슬라이싱을 사용하여 수정 할 수 있다. 리스트의 기존 요소를 빈칸으로 수정함으로써 요소를 삭제할 수 있으며, dle 키워드를 사용하여 삭제할 수 있다. 리스트 함수 문자열과 마찬가지로 리스트 변수 이름 뒤에 .을 붙여 함수를 호출하는 방식으로 사용한다. 함수의 종류 종류 함수 설명 요소 추가 append(x) 리스트 맨 뒤에 요소 x 추가 insert(x,y) 인덱스 x 위치에 y를 추가 extend(x) 리스트 맨 뒤에 리스트 x를 추가 요소 삭제 remove(x) 가장 처음 나오는 x를 찾아 삭제, 없으면 오류 발생 pop() 리스트 마지막 요소를 반환 후 삭제 요소 배열 sort() 리스트 요소를 정렬 reverse() 리스트를 역순으로 뒤집기 리스트 정보 index(x) x를 찾아 인덱스 값을 반환, 없다면 오류 발생 count(x) 리스트 내 x의 개수 반환 빈 리스트에 값을 초기화하지 않은 상태에서는 인덱스를 사용하여 요소에 접근할 수 없다. 빈 리스트에 새로운 요소를 추가하기 위해서는 append 함수를 사용해야 하며, 여러 개의 요소를 한 번에 추가하려는 경우 extend 함수를 사용할 수 있다. 튜플 자료형 몇가지의 다른 점을 제외하면 리스트와 거의 비슷한 자료형이다. 아래 몇가지 차이점이 있다 리스트는 [], 튜플은 ()으로 둘러싼다. 리스트는 요솟값의 생성, 삭제, 수정이 가능하지만, 튜플은 요솟값을 바꿀 수 없다. 튜플 연산 1 덧셈기호(+)를 사용하여 튜플 연결 연산을 수행할 수 있다. 곱셈기호(*)를 사용하여 튜플을 반복하는 연산을 수행할 수 있다. 리스트튜플, 정수튜플 형태로 사용할 수 있다. len함수(len())를 사용하여 리스트에 길이를 구할 수 있다. 튜플 인덱싱과 슬라이싱 1 문자열과 리스트의 인덱싱, 슬라이싱과 동일하게 사용할 수 있다. 딕셔너리 자료형 KEY와 VALUE를 한쌍으로 가지며 대응관계를 나타내는 자료형이다. 요소값에 대한 순서가 없으며 \u0026quot;Key: Value\u0026quot;의 형태로 값을 저장하요 Ket를 통해 Value를 얻을 수 있다. 쌍을 이루는 각 요소는 쉼표로 구분하며 중괄호({})로 감싸서 표현한다. 1 2 3 dic = {key1:value1,key2:value2} dic = dict(key1=value1,key2=value2) dic = {} #비어있는 딕셔너리 -주의 사항 - 딕셔너리의 Key에 리스트를 사용할 수 없다. value에는 어떤 값이든 사용할 수 있다. Key는 Value를 찾기 위한 유일한 값이므로 중복을 사용할 경우 하나를 제외한 나머지 요소는 무시된다. 요소추가, 수정, 삭제 1 2 딕셔너리 이름[key] = value #딕셔너리에 값 추가 del 딕셔너리 이름[key] #{key:value} 쌍 삭제 딕셔너리 함수 함수 설명 keys key만 모아서 dict_keys 객채 형태로 리턴 values value만 모아서 dict_values 객채 형태로 리턴 item key,value 쌍을 튜플로 묶어 dict_items 객채 형태로 리턴 clear key:value 쌍 모두 지우기 get(key) key로 value 얻기 key in x key가 딕셔너리 x안에 있는지 조사하여 True/False 반환 집합 자료형 집합의 특징을 그대로 구현하여 집합에 관련된 것을 쉽게 처리하기 위한 자료형 집합의 각 요소는 쉼표로 구현하고 {}로 감싸서 표현한다. 요소의 순서가 없고 그로인해 인덱싱과 슬라이싱을 사용할 수 없다. 중복되는 값은 한 개만 저장하기 때문에 리스트 혹은 집합은 집합의 원소가 될 수 없다. 1 2 3 집합 이름 = {요소1,요소2, ...} 집합 이름 = set(묶음 자료형)#문자열,리스트, 튜플을 집합으로 변경 집합 이름 = set() 집합 연산과 함수 종류 연산 설명 사용 구문 교집합 집합에 공통으로 들어 있는 원소의 집합 \u0026amp; ,intersection() 합집합 적어도 한 집합에 들어 있는 원소의 집합 | ,union() 차집합 A에 대한 B의 차집합(A-B)은 A의 속하고 B에는 속하지 않는 원소의 집합 - ,difference() 함수 설명 add(x) x 값 추가 update(묶음 자료형) 묶음 자료형 내 여러개의 요소 추가 remove(x) x의 값 삭제 그냥 리스트랑 똑같다\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-12T00:48:00Z","image":"http://localhost:1313/p/simple_python2/thumb_hu6ce46be598242d68941202901d39eb59_93419_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/simple_python2/","title":"python 기초문법2"},{"content":"python의 자료형 파이썬은 자동으로 자료형을 추론해 주지만, 프로그램을 만들때 어떤 자료를 저장할 것인지 알고 있는 것은 매우 중요합니다. 파이썬의 자료형은 크게 데이터형과 컨테이너형으로 구분할 수 있습니다. 오늘은 데이터형만 다룰 것입니다. 데이터형 숫자형 항목 파이썬 활용 예시 정수 123, -456, 0 실수 123.45, -1234.5, 3.4e10 8진수 0o34, 0o25 16진수 0x2A, 0xFF 정수형 정수형(integer)이란 말 그대로 정수를 뜻하는 자료형을 말한다. 다음은 양의 정수와 음의 정수, 숫자 0을 변수 a에 대입하는 예입니다.\n1 2 3 a = 123 a = -178 a = 0 실수형 파이썬에서 실수형(floating-point)은 소수점이 포함된 숫자를 말한다. 다음은 실수를 변수 a에 대입하는 예이다. 일반적으로 볼 수 있는 실수형의 소수점 표현 방식입니다.\n1 2 a = 1.2 a = -3.45 다음은 ‘컴퓨터식 지수 표현 방식’으로, 파이썬에서는 4.24e10 또는 4.24E10처럼 표현합니다(e와 E 둘 중 어느 것을 사용해도 됩니다).\n1 2 a = 4.24E10 #4.24*10**10 a = 4.24e-10 #4.24**(-10) 8진수와 16진수 8진수(octal)를 만들기 위해서는 숫자가 0o 또는 0O(숫자 0 + 알파벳 소문자 o 또는 대문자 O)으로 시작하면 됩니다.\n1 2 3 a=0o177 print(a) #127 16진수(hexadecimal)를 만들기 위해서는 0x로 시작하면 됩니다.\n1 2 3 4 a=0x8ff b=0xABC print(b) #2748 8진수나 16진수는 파이썬에서 잘 사용하지 않는 형태의 숫자 자료형이므로 간단히 눈으로만 익히고 넘어갑시다.\nbool형 참과 거짓을 나타내는 자료형, 프로그램의 실행 흐름을 제어 할때 사용 True(참),False(거짓)의 두 가지 값만 가질 수 있으며, 첫번째는 항상 대문자 자료형의 참과 거짓 자료형 값 참/거짓 숫자형 0이 아닌수 True 숫자형 0 False 문자열 \u0026lsquo;hello\u0026rsquo; True 문자열 '' False 리스트 [1,2,3] True 리스트 [] False 튜플 () False 딕셔너리 {} False 문자열 자료형 문자열(string)이란 연속된 문자들의 나열 따옴표(큰따옴표, 작은 따옴표) 1개 혹은 3개로 감싸져서 표현된 문자와 단어의 묶음 자세한건 입출력문에서 다룰 예정입니다. ","date":"2024-04-11T12:50:00Z","image":"http://localhost:1313/p/simple_python1/thumb_hu6ce46be598242d68941202901d39eb59_93419_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/simple_python1/","title":"python 기초문법1"},{"content":"python이란? 암스테르담의 귀도 반 로섬(Guido van rossum)이 개발한 인터프리터 언어\npython install window\n여기서 설치를 한다 Mac\n이미 설치가 되어있다 python 특징 인터프리터 언어: 소스 코드를 한 줄씩 해석해서 실행결과를 바로 확인할 수 있는 언어 인터프리터 언어 컴파일 언어 용어 정의 소스코드를 한줄씩 해석해서 실행 결과를 바로 확인 할 수 있는 언어 코드가 실행 되기전, 기계어로 모두 번역하여 실행하는 언어 특징 한 줄씩 번역과 실행을 동시에 진행하므로 상대적으로 느림 잘못된 명령을 수정하기 쉬움 소스 코드를 목적 코드로 번역하는 과정에서 시간이 소요됨 런타임 상황에서는 빠르게 실행 가능 예시 Python, JavaScript C, C++ 동적 타입 언어\n변수의 자료형을 지정하지 않고 선언만으로도 값 지정 가능 ex) 1 2 a = 10 a = \u0026#39;asdf\u0026#39; #정수 자료형을 문자열로 바꿔도 오류가 나지 않는다. 변수의 자료형은 코드가 시행되는 시점에 결정 프로그램이 복잡해질 경우 타입으로 인한 에러가 발생 할 수도 있음 객체 지향 언어\n객체의 특징을 클래스로 구현 클래스로 구현된 프로그래밍을 다른 프로그래밍에 재사용 할 수 있다. 클래스는 캡슐화를 거치면 그 안의 코드를 몰라도 사용할 수 있다. 다향성이 적용되어 같은 객체를 가지고도 다양하게 사용될 수 있다. 쉽고 간결 =\u0026gt; \u0026lsquo;개발 속도\u0026rsquo;가 빠르다\n\u0026ldquo;Life is too short, You need Python\u0026rdquo;1 높은 확장성과 이식성\n대표적인 접착언어, 다른언어와 쉽게 결합이 가능하다. 수많은 라이브러리를 제공, 문제해결을 빠르게 해결하고 확장할 수 있음 python의 활용 시스템 유틸리티 제작: 운영체제의 시스템 명령어를 사용할 수 있는 각종 도구를 갖추고 있다 GUI 프로그래밍: 파이썬은 GUI 프로그래밍을 위한 도구들이 잘 갖추어져 있기 때문에 GUI 프로그램을 쉽게 만들 수 있다. 웹 프로그래밍: 파이썬은 웹 프로그램을 만들기에 매우 적합한 도구이며, 실제로 파이썬으로 제작한 웹 사이트는 셀 수 없을 정도로 많다. 데이터베이스 프로그래밍: 파이썬은 사이베이스(Sybase), 인포믹스(Infomix), 오라클(Oracle), 마이에스큐엘(MySQL), 포스트그레스큐엘(PostgreSQL) 등의 데이터베이스에 접근하기 위한 도구를 제공한다. 데이터 분석: 파이썬은 데이터 분석에 이상적인 언어로, 넘파이(NumPy), 판다스(Pandas), 맷플롯립(Matplotlib) 등과 같은 라이브러리들을 활용하여 데이터 처리, 통계 분석, 시각화를 손쉽게 수행할 수 있다. 머신러닝 프로그래밍: 파이썬은 인공지능과 머신러닝 프로그래밍을 쉽게 할 수 있도록 사이킷런(scikit-learn), 텐서플로(TensorFlow), 파이토치(PyTorch), 케라스(Keras) 등과 같은 다양한 라이브러리를 제공한다. 시스템 유틸리티 제작하기: 파이썬은 운영체제(윈도우, 리눅스 등)의 시스템 명령어를 사용할 수 있는 각종 도구를 갖추고 있다 엄청나게 빠른 파이썬의 개발 속도 때문에 유행처럼 퍼진 말이다.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-11T06:04:00Z","image":"http://localhost:1313/p/about_python/thumb_hu6ce46be598242d68941202901d39eb59_93419_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/p/about_python/","title":"python이란?"}]